{"version":3,"sources":["Avengers.js","AddAvenger.js","App.js","serviceWorker.js","index.js"],"names":["Avengers","AvengerList","avengers","map","avenger","power","className","key","id","name","heroname","AddAvenger","state","handleChange","e","setState","target","value","handleSubmit","preventDefault","console","log","props","addAvenger","onSubmit","this","htmlFor","type","onChange","Component","App","Math","random","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yQAgCeA,EA/BE,SAAC,GAAgB,IAepBC,EAfmB,EAAdC,SAekBC,KAAK,SAAAC,GAC9B,OAAOA,EAAQC,MAAQ,GACnB,yBAAKC,UAAU,UAAUC,IAAKH,EAAQI,IAC7B,uCAAcJ,EAAQK,MACtB,2CAAkBL,EAAQM,UAC1B,wCAAeN,EAAQC,QAEhC,QAER,OACI,yBAAKC,UAAU,eACTL,I,OCMHU,E,2MA9BXC,MAAQ,CACJH,KAAM,KACNC,SAAU,KACVL,MAAO,M,EAEXQ,aAAe,SAACC,GACZ,EAAKC,SAAL,eACKD,EAAEE,OAAOR,GAAMM,EAAEE,OAAOC,S,EAGjCC,aAAe,SAACJ,GACZA,EAAEK,iBACFC,QAAQC,IAAI,EAAKT,OACjB,EAAKU,MAAMC,WAAW,EAAKX,Q,wEAG3B,OACI,0BAAMY,SAAUC,KAAKP,cACjB,2BAAOQ,QAAQ,QAAf,QACA,2BAAOC,KAAK,OAAOnB,GAAG,OAAOoB,SAAUH,KAAKZ,eAC5C,2BAAOa,QAAQ,YAAf,YACA,2BAAOC,KAAK,OAAOnB,GAAG,WAAWoB,SAAUH,KAAKZ,eAChD,2BAAOa,QAAQ,SAAf,SACA,2BAAOC,KAAK,OAAOnB,GAAG,QAAQoB,SAAUH,KAAKZ,eAC7C,+C,GAzBSgB,aC6BVC,E,2MA3BblB,MAAQ,CACNV,SAAW,CACT,CAACO,KAAK,aAAcC,SAAS,WAAYL,MAAM,MAAOG,GAAG,GACzD,CAACC,KAAK,eAAgBC,SAAS,kBAAmBL,MAAM,KAAMG,GAAG,GACjE,CAACC,KAAK,eAAgBC,SAAS,OAAQL,MAAM,KAAMG,GAAG,K,EAG1De,WAAa,SAACnB,GACZA,EAAQI,GAAKuB,KAAKC,SAClB,IAAI9B,EAAQ,sBAAO,EAAKU,MAAMV,UAAlB,CAA6BE,IACzC,EAAKW,SAAS,CACZb,SAAWA,K,wEAIb,OACE,yBAAKI,UAAU,OACb,4CACA,8CACA,kBAAC,EAAD,CAAUJ,SAAUuB,KAAKb,MAAMV,WAC/B,6BACA,kBAAC,EAAD,CAAYqB,WAAYE,KAAKF,kB,GAtBnBM,aCSEI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.dfac2b6f.chunk.js","sourcesContent":["import React from 'react';\nconst Avengers = ({avengers}) => {\n        // const AvengerList = avengers.map( avenger => {\n        //     if (avenger.power<3){\n        //         return (\n        //             <div className=\"avenger\" key={avenger.id}>\n        //                 <div>Name : { avenger.name }</div>\n        //                 <div>HeroName : { avenger.heroname }</div>\n        //                 <div>Power : { avenger.power }</div>\n        //             </div>\n        //         );\n        //     } else{\n        //         return null;\n        //     }\n            \n        // })\n        const AvengerList = avengers.map( avenger => {\n            return avenger.power > 85 ? (\n                <div className=\"avenger\" key={avenger.id}>\n                         <div>Name : { avenger.name }</div>\n                         <div>HeroName : { avenger.heroname }</div>\n                         <div>Power : { avenger.power }</div>\n                </div>\n            ) : null;\n        });\n        return (\n            <div className=\"avengerlist\">\n                { AvengerList }\n            </div>\n        );\n}\n\nexport default Avengers;","import React, {Component} from 'react'\n\nclass AddAvenger extends Component {\n    state = {\n        name: null,\n        heroname: null,\n        power: null\n    }\n    handleChange = (e) => {\n        this.setState({\n            [e.target.id] : e.target.value\n        })\n    }\n    handleSubmit = (e) => {\n        e.preventDefault()\n        console.log(this.state)\n        this.props.addAvenger(this.state)\n    }\n    render () {\n        return (\n            <form onSubmit={this.handleSubmit}>\n                <label htmlFor=\"name\">Name</label>\n                <input type=\"text\" id=\"name\" onChange={this.handleChange}/>\n                <label htmlFor=\"heroname\">HeroName</label>\n                <input type=\"text\" id=\"heroname\" onChange={this.handleChange}/>\n                <label htmlFor=\"power\">Power</label>\n                <input type=\"text\" id=\"power\" onChange={this.handleChange}/>\n                <button>Submit</button>\n            </form>\n        );\n    }\n}\n\nexport default AddAvenger;","import React, {Component} from 'react';\nimport Avengers from './Avengers';\nimport AddAvenger from './AddAvenger'\nclass App extends Component {\n  state = {\n    avengers : [\n      {name:\"Tony Stark\", heroname:\"Iron Man\", power:\"100\", id:1},\n      {name:\"Steve Rogers\", heroname:\"Captain America\", power:\"90\", id:2},\n      {name:\"Thor Odinson\", heroname:\"Thor\", power:\"80\", id:3 }\n    ]\n  }\n  addAvenger = (avenger) => {\n    avenger.id = Math.random()\n    let avengers = [...this.state.avengers , avenger]\n    this.setState({\n      avengers : avengers\n    })\n  }\n  render () {\n    return (\n      <div className=\"App\">\n        <h1>My First App</h1>\n        <p>Happy Coding..!</p>\n        <Avengers avengers={this.state.avengers} />\n        <br></br>\n        <AddAvenger addAvenger={this.addAvenger}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}